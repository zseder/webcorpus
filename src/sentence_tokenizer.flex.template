/*
Copyright 2011 Attila Zseder
Email: zseder@gmail.com

This file is part of webcorpus
url: https://github.com/zseder/webcorpus

webcorpus pipeline is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
*/

%option noyywrap

%s AFTER_NUM_STATE AFTER_NBP ENDOF_SEN_STATE ENDOF_SEN_STATE_SPACE AFTER_FINAL_CLOSING_STATE 

%{
%}

INSERT_CHARACTER_DEFS
ISNUM [0-9]
ISALNUM {LATIN_CHAR}|{ISNUM}
ISLOWER {LATIN_CHARACTER_SMALL}
ISUPPER {LATIN_CHARACTER_CAPITAL}

    /*
NONBREAKING_PREFIX_EN ("Adj"|"Adm"|"Adv"|"Asst"|"Bart"|"Bldg"|"Brig"|"Bros"|"Capt"|"Cmdr"|"Col"|"Comdr"|"Con"|"Corp"|"Cpl"|"DR"|"Dr"|"Drs"|"Ens"|"Gen"|"Gov"|"Hon"|"Hr"|"Hosp"|"Insp"|"Jr"|"Lt"|"MM"|"MR"|"MRS"|"MS"|"Maj"|"Messrs"|"Mlle"|"Mme"|"Mr"|"Mrs"|"Ms"|"Msgr"|"Op"|"Ord"|"Pfc"|"Ph"|"Prof"|"Pvt"|"Rep"|"Reps"|"Res"|"Rev"|"Rt"|"Sen"|"Sens"|"Sfc"|"Sgt"|"Sr"|"St"|"Supt"|"Surg"|"v"|"vs"|"i.e"|"rev"|"e.g")
   */
NONBREAKING_PREFIX ({ISUPPER}INSERT_LANGUAGE_NONBREAKING_PREFIX)

SPACE [ 	\240]
PERIOD "."

    /* following two defs are extracted from perls Pi.pl and Pf.pl */
PUNCT_FINAL (\x00\xbb|\x20\x19|\x20\x1d|\x20\x3a|\x2e\x03|\x2e\x05|\x2e\x0a|\x2e\x0d|\x2e\x1d|\x2e\x21|\xe2\x80\x9d)
PUNCT_INIT (\x00\xab|\x20\x18|\x20\x1b|\x20\x1c|\x20\x1f|\x20\x39|\x2e\x02|\x2e\x04|\x2e\x09|\x2e\x0c|\x2e\x1c|\x2e\x20|\xe2\x80\x9c)

NONPERIOD_ENDOF_SEN [!?]

OPENING_SIGN [\'\"\(\[\-\`]
CLOSING_SIGN [\'\"\)\]]

STARTOF_SEN (\xc2\xbf|\xc2\xa1|{PUNCT_INIT}|{OPENING_SIGN})|{ISUPPER}|{ISNUM}

ENDOF_SEN ({PERIOD}|{NONPERIOD_ENDOF_SEN})+
FINAL_CLOSING ({PUNCT_FINAL}|{CLOSING_SIGN}|{ENDOF_SEN})

%%

"\n\n" {
    // at paragraph endings, add new line, it must be end of sentence, too
    ECHO;
    BEGIN(INITIAL);
}
<INITIAL>"\n" {
    printf(" ");
}
<INITIAL>{ISNUM}+ {
    ECHO;
    BEGIN(AFTER_NUM_STATE);
}
<INITIAL>{SPACE}{NONBREAKING_PREFIX}{PERIOD} {
    // never break at nonbreaking prefixes
    ECHO;
    BEGIN(AFTER_NBP);
}
<INITIAL>({ENDOF_SEN}|{PERIOD}+) {
    // these are possible abbreviations
    ECHO;
    BEGIN(ENDOF_SEN_STATE);
}
<INITIAL>. {
    ECHO;
}

<AFTER_NUM_STATE>"\n" {
    // if it cannot be an end of sentence, change newline to space and continue with same sentence
    printf(" ");
    BEGIN(INITIAL);
}
<AFTER_NUM_STATE>{PERIOD}({ISNUM}|"-")+ {
    // handle periods around numbers
    ECHO;
}
<AFTER_NUM_STATE>{PERIOD}+ {
    // if there is a period after a number, and patterns before not matched, this could be an end of sentence
    ECHO;
    BEGIN(ENDOF_SEN_STATE);
}
<AFTER_NUM_STATE>. {
    ECHO;
    BEGIN(INITIAL);
}

<AFTER_NBP>{SPACE}?{ISALNUM} {
    ECHO;
    BEGIN(INITIAL);
}

<ENDOF_SEN_STATE>"\n"{STARTOF_SEN} {
    // if at a possible end of sentence, there is a newline, handle it as endof sentence
    ECHO;
    BEGIN(INITIAL);
}
<ENDOF_SEN_STATE>{SPACE}+ {
    BEGIN(ENDOF_SEN_STATE_SPACE);
}
<ENDOF_SEN_STATE>{FINAL_CLOSING}+ {
    ECHO;
    BEGIN(AFTER_FINAL_CLOSING_STATE);
}
<ENDOF_SEN_STATE>{STARTOF_SEN} {
    printf("%s", yytext);
    BEGIN(INITIAL);
}
<ENDOF_SEN_STATE>. {
    ECHO;
    BEGIN(INITIAL);
}

<ENDOF_SEN_STATE_SPACE>{NONBREAKING_PREFIX}{PERIOD} {
    // never break at nonbreaking prefixes
    // printf("\n");
    ECHO;
    BEGIN(AFTER_NBP);
}
<ENDOF_SEN_STATE_SPACE>{STARTOF_SEN} {
    printf("\n");
    ECHO;
    BEGIN(INITIAL);
}
<ENDOF_SEN_STATE_SPACE>. {
    printf(" ");
    ECHO;
    BEGIN(INITIAL);
}

    /* "?!.:" end of sentence markers followed by CLOSING_SIGN and OPENING_SIGN and after that, sentence starters. 
       the main reason of this four done one by one is that we want to split between end sentence and start sentence
       only if there were at least one closing sign or opening sign between period/!?: and Capital sentence starter.
       The simple case of tokenizing period->space->capital, without closing and opening signs are handled differently
    */
<AFTER_FINAL_CLOSING_STATE>({SPACE}|"\n")*{STARTOF_SEN} {
    // if at a possible end of sentence, there is a newline, handle it as endof sentence
    printf("\n");
    printf("%c", yytext[strlen(yytext)-1]);
    BEGIN(INITIAL);
}
<AFTER_FINAL_CLOSING_STATE>. {
    ECHO;
    BEGIN(INITIAL);
}

